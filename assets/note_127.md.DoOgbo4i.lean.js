import{d as p,u as h,k as r,c as a,l as i,t,a as d,e as n,a3 as k,o as e}from"./chunks/framework.7ep0oyv4.js";const o=k(`<h1 id="dockerfile语法" tabindex="-1">Dockerfile语法 <a class="header-anchor" href="#dockerfile语法" aria-label="Permalink to &quot;Dockerfile语法&quot;">​</a></h1><h2 id="常见指令" tabindex="-1">常见指令 <a class="header-anchor" href="#常见指令" aria-label="Permalink to &quot;常见指令&quot;">​</a></h2><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>FORM</td><td>指定基础镜像</td><td><code>FROM centos:6</code></td></tr><tr><td>ENV</td><td>设置环境变量</td><td><code>ENV key value</code></td></tr><tr><td>COPY</td><td>复制本地文件到镜像指定目录</td><td><code>COPY /hostPath/to/file /containerPath</code></td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td><code>RUN tar -zxf /root/jre.tar.gz &amp;&amp; EXPORTS path=/containerPath/jre:$path</code></td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td><code>EXPOSE 8080</code></td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td><code>ENTRYPOINT java -jar server.jar</code></td></tr></tbody></table><h2 id="构建镜像" tabindex="-1">构建镜像 <a class="header-anchor" href="#构建镜像" aria-label="Permalink to &quot;构建镜像&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repositor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><code>-t</code>：tag，格式<code>&lt;repository&gt;:&lt;tag&gt;</code>，不指定则默认为<code>latest</code></li><li><code>&lt;path&gt;</code>：<code>Dockerfile</code>所在目录，<code>.</code>代表当前目录</li></ul><h2 id="dockerfile示例" tabindex="-1">Dockerfile示例 <a class="header-anchor" href="#dockerfile示例" aria-label="Permalink to &quot;Dockerfile示例&quot;">​</a></h2><p>以<code>SpringBoot</code>打包的jar为例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用官方 OpenJDK 8 镜像作为基础镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openjdk:8-jdk-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 作者信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LABEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maintainer=&quot;xclhove@qq.com&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将本地的 server.jar 复制到容器中的 /app 目录下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./server.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app/server.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露 Spring Boot 默认端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 容器启动时运行的命令，启动 Spring Boot 应用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-jar&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;server.jar&quot;]</span></span></code></pre></div>`,9),c=["href"],g=["href"],F={key:1,style:{margin:"0 5px"}},u=["href"],v=JSON.parse('{"title":"Dockerfile语法","description":"","frontmatter":{"prev":{"text":"笔记","link":"/笔记"}},"headers":[],"params":{"id":127,"title":"Dockerfile语法","userId":1,"releaseTime":"2024-07-16T11:00:34.000+00:00","updateTime":"10/11/2024, 5:04:56 AM","isPublic":"公开","typeId":8,"sourceUrl":"https://xnote.xclhove.top/note/preview/127","prev":{"link":"./111#flex 弹性布局","text":"上一篇：flex 弹性布局"},"next":{"link":"./131#Java中的线程安全","text":"下一篇：Java中的线程安全"}},"relativePath":"note/127.md","filePath":"note/127.md"}'),y={name:"note/127.md"},f=p({...y,setup(E){const{params:l}=h();return r(()=>{document.title=l.value.title}),(s,m)=>(e(),a("div",null,[o,i("p",null,"最近更新："+t(s.$params.updateTime),1),i("p",null,[d("原文链接："),i("a",{target:"_blank",href:s.$params.sourceUrl},t(s.$params.title),9,c)]),i("span",null,[s.$params.prev?(e(),a("a",{key:0,class:"prev",href:s.$params.prev.link},t(s.$params.prev.text),9,g)):n("",!0),s.$params.prev&&s.$params.next?(e(),a("span",F,"|")):n("",!0),s.$params.next?(e(),a("a",{key:2,href:s.$params.next.link},t(s.$params.next.text),9,u)):n("",!0)])]))}});export{v as __pageData,f as default};
