import{d,u as i,k as l,c as e,l as a,t as r,a as p,e as n,a3 as c,o as s}from"./chunks/framework.7ep0oyv4.js";const h=c('<h1 id="dockercompose" tabindex="-1">DockerCompose <a class="header-anchor" href="#dockercompose" aria-label="Permalink to &quot;DockerCompose&quot;">​</a></h1><p>命令格式：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options] [command]</span></span></code></pre></div><p><code>options</code></p><table><thead><tr><th style="text-align:center;">参数</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">-f</td><td>指定compose文件的路径和名称（处于compose文件的目录可不写）</td></tr><tr><td style="text-align:center;">-p</td><td>指定project名称</td></tr></tbody></table><p><code>commands</code></p><table><thead><tr><th style="text-align:center;">command</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">up</td><td>创建并启动所有service容器</td></tr><tr><td style="text-align:center;">dowm</td><td>停止并移除所有容器和网络</td></tr><tr><td style="text-align:center;">ps</td><td>列出所有启动的容器</td></tr><tr><td style="text-align:center;">logs</td><td>查看指定容器的日志</td></tr><tr><td style="text-align:center;">stop</td><td>停止容器</td></tr><tr><td style="text-align:center;">start</td><td>启动容器</td></tr><tr><td style="text-align:center;">restart</td><td>重启容器</td></tr><tr><td style="text-align:center;">top</td><td>查看运行的进程</td></tr><tr><td style="text-align:center;">exec</td><td>在指定运行的容器中执行命令</td></tr></tbody></table>',7),m=["href"],u=["href"],y={key:1,style:{margin:"0 5px"}},k=["href"],f=JSON.parse('{"title":"DockerCompose","description":"","frontmatter":{"prev":{"text":"笔记","link":"/笔记"}},"headers":[],"params":{"id":129,"title":"DockerCompose","userId":1,"releaseTime":"2024-07-16T13:00:06.000+00:00","updateTime":"10/11/2024, 5:05:40 AM","isPublic":"公开","typeId":8,"sourceUrl":"https://xnote.xclhove.top/note/preview/129","prev":{"link":"./138#Electron Security Warning (Insecure Content-Security-Policy)","text":"上一篇：Electron Security Warning (Insecure Content-Security-Policy)"},"next":{"link":"./135#Nginx 日志分割脚本（仅供参考）","text":"下一篇：Nginx 日志分割脚本（仅供参考）"}},"relativePath":"note/129.md","filePath":"note/129.md"}'),g={name:"note/129.md"},C=d({...g,setup(x){const{params:o}=i();return l(()=>{document.title=o.value.title}),(t,b)=>(s(),e("div",null,[h,a("p",null,"最近更新："+r(t.$params.updateTime),1),a("p",null,[p("原文链接："),a("a",{target:"_blank",href:t.$params.sourceUrl},r(t.$params.title),9,m)]),a("span",null,[t.$params.prev?(s(),e("a",{key:0,class:"prev",href:t.$params.prev.link},r(t.$params.prev.text),9,u)):n("",!0),t.$params.prev&&t.$params.next?(s(),e("span",y,"|")):n("",!0),t.$params.next?(s(),e("a",{key:2,href:t.$params.next.link},r(t.$params.next.text),9,k)):n("",!0)])]))}});export{f as __pageData,C as default};
