import{d as n,u as s,k as p,c as a,l as t,t as l,a as d,e as r,a3 as c,o}from"./chunks/framework.7ep0oyv4.js";const h=c('<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><p>事件循环(event loop)(W3C)又叫消息循环(message loop)(Google)</p><ol><li>开始时，浏览器的渲染主线程会进入一个无线循环</li><li>每次循环都会检查消息队列(messqge queue)中是否有任务，有任务则拿出第一个来执行，没有则睡眠</li></ol><h2 id="异步" tabindex="-1">异步 <a class="header-anchor" href="#异步" aria-label="Permalink to &quot;异步&quot;">​</a></h2><p>JS是一门单线程的语言，因为它运行在浏览器的<strong>渲染主线程</strong>中，而渲染主线程只有一个。</p><p>而渲染主线程承担若诸多的工作，渲染页面、执行JS都在其中运行。</p><p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。 这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><h2 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-label="Permalink to &quot;队列&quot;">​</a></h2><ol><li>微队列的任务优先级（ 最高）:<code>Promise.resolve.then(function)</code>，将function放入微队列</li><li>交互队列（高）</li><li>延时队列（中）</li></ol><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><ol><li>例子1</li></ol><ul><li>代码</li></ul><p><img src="https://xnote.xclhove.top/api/image/name/0cd3185c-e8af-4107-ba00-3477d74eb267.png" alt="5a1ec0268f6189e41c4f70fc49d0906c.png"></p><ul><li>运行结果</li></ul><p><img src="https://xnote.xclhove.top/api/image/name/dd41d0ed-1ccd-4431-a9fe-473cff5aaf8d.png" alt="a538308ca7a0869683a74081da52218e.png"></p><ol start="2"><li>例子2</li></ol><ul><li>代码</li></ul><p><img src="https://xnote.xclhove.top/api/image/name/a4754e31-08d9-4b33-b79d-314d34d631ad.png" alt="b8a8f8d13b4d992c84888294f9ef3bd5.png"></p><ul><li>运行结果</li></ul><p><img src="https://xnote.xclhove.top/api/image/name/04c99589-65e3-4c8a-957e-c66d1f6ba924.png" alt="6bc076594f27e7880d00aa3c9e902458.png"></p><h2 id="阐述js事件循环" tabindex="-1">阐述js事件循环 <a class="header-anchor" href="#阐述js事件循环" aria-label="Permalink to &quot;阐述js事件循环&quot;">​</a></h2><p><strong>事件循环</strong>又叫做<strong>消息循环</strong>，是浏览器渲染主线程的工作方式。</p><p>在Chrome的源码中，它开启一个不会结束的for循环，每次循环从<strong>消息队列</strong>中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据3C官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列弧不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个<strong>微队列</strong>，<strong>微队列的任务一定具有最高的优先级</strong>，必须优先调度执行。</p><h2 id="计时器无法做到精确计时" tabindex="-1">计时器无法做到精确计时 <a class="header-anchor" href="#计时器无法做到精确计时" aria-label="Permalink to &quot;计时器无法做到精确计时&quot;">​</a></h2><ol><li>计算机硬件没有原子钟，无法做到精确计时。</li><li>操作系统的计时函数本身就有少量偏差，由于JS的计时器最终调用的是操作系统的函数，也就携带了这些偏差。</li><li>按照W3C的标准，浏览器实现计时器时，如果嵌套层级超过5层，则会带有4毫秒的最少时间，这样在计时时间少于4毫秒时又带来了偏差。</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差。</li></ol>',29),m=["href"],u=["href"],g={key:1,style:{margin:"0 5px"}},f=["href"],q=JSON.parse('{"title":"事件循环","description":"","frontmatter":{"prev":{"text":"笔记","link":"/笔记"}},"headers":[],"params":{"id":77,"title":"事件循环","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"1/28/2024, 1:38:42 AM","isPublic":"公开","typeId":20,"sourceUrl":"https://xnote.xclhove.top/note/preview/77","prev":{"link":"./88#由于无法应用有效的许可证或旁加载策略，部晋程序包来源为Unsigned的程序包失败，可能需要开发者许可证或企业旁加载配置","text":"上一篇：由于无法应用有效的许可证或旁加载策略，部晋程序包来源为Unsigned的程序包失败，可能需要开发者许可证或企业旁加载配置"},"next":{"link":"./94#prettier安装","text":"下一篇：prettier安装"}},"relativePath":"note/77.md","filePath":"note/77.md"}'),b={name:"note/77.md"},_=n({...b,setup(x){const{params:i}=s();return p(()=>{document.title=i.value.title}),(e,k)=>(o(),a("div",null,[h,t("p",null,"最近更新："+l(e.$params.updateTime),1),t("p",null,[d("原文链接："),t("a",{target:"_blank",href:e.$params.sourceUrl},l(e.$params.title),9,m)]),t("span",null,[e.$params.prev?(o(),a("a",{key:0,class:"prev",href:e.$params.prev.link},l(e.$params.prev.text),9,u)):r("",!0),e.$params.prev&&e.$params.next?(o(),a("span",g,"|")):r("",!0),e.$params.next?(o(),a("a",{key:2,href:e.$params.next.link},l(e.$params.next.text),9,f)):r("",!0)])]))}});export{q as __pageData,_ as default};
