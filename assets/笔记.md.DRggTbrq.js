import{d as r,c as t,l as e,F as o,E as s,m as a,a as l,o as i,t as d}from"./chunks/framework.7ep0oyv4.js";const p=JSON.parse('[{"id":104,"title":"boss","content":"代码：\\n\\n`index.js`、`init.js`、`package.json`处于同一文件夹内！！！\\n\\n`index.js`\\n\\n```js\\n\\nconst fs = require(\'fs\');\\nconst docx = require(\'docx\');\\n\\nconst { Document, Paragraph, TextRun, ExternalHyperlink } = docx;\\n\\nconst {jobList} = JSON.parse(fs.readFileSync(\'./job.json\', { encoding: \'utf8\'})).zpData\\nconst externalHyperlinks = []\\njobList.forEach(({jobName, encryptJobId}) => {\\n    const link = `https://www.zhipin.co","userId":1,"releaseTime":"2024-06-06T14:33:05.000+00:00","updateTime":"2024-06-06T14:33:05.000+00:00","isPublic":"公开","typeId":1,"url":"/note/104#boss"},{"id":2,"title":"idea插件","content":"# idea插件\\n\\n## Git Commit Message Helper\\n\\n[https://plugins.jetbrains.com/plugin/13477-git-commit-message-helper](https://plugins.jetbrains.com/plugin/13477-git-commit-message-helper)\\n\\n```\\nGit Commit Message Helper\\n```\\n\\n## GsonFormat\\n\\n可以将JSON字符串自动转换成Java实体类\\n\\n```\\nGsonFormatPlus\\n```\\n\\n## Translation\\n\\n翻译\\n\\n```\\nTranslation\\n```\\n\\n## 阿里巴巴代码规范检查插件\\n\\n```\\nAlibaba Java Coding Guidelines\\n```\\n\\n## 快捷键提示\\n\\n```\\nKey Prom","userId":1,"releaseTime":"2024-01-27T17:38:42.000+00:00","updateTime":"2024-01-27T17:38:42.000+00:00","isPublic":"公开","typeId":1,"url":"/note/2#idea插件"},{"id":5,"title":"less介绍","content":"# Less\\n\\n## less使用\\n\\n在浏览器环境中使用 Less ：\\n\\n```html\\n<link rel=\\"stylesheet/less\\" type=\\"text/css\\" href=\\"styles.less\\" />\\n<script src=\\"https://cdn.jsdelivr.net/npm/less@4\\" ><\/script>\\n```\\n\\n也可以新建后缀为less的文件，写完后自动编译为css文件，后再使用link引入\\n\\n## less与css区别\\n\\n1. Less是一门CSS预处理语言，css是一种用来表现HTML或XML等文件样式的计算机语言。\\n\\n2. less扩展了CSS语言，增加了变量、Mixin、函数等特性。\\n\\n3. css可以被浏览器直接识别，less需要先编译为css。\\n\\n## Less为css新加功能如下\\n\\n1. **变量（Variables）**\\n\\n无需多说，","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:51:27.000+00:00","isPublic":"公开","typeId":3,"url":"/note/5#less介绍"},{"id":20,"title":"CentOS7编译安装php5.6","content":"在CentOS 7上编译安装PHP 5.6并启用PHP-FPM，您可以按照以下最小安装命令进行操作：\\n\\n1. 首先，确保您的系统已安装必要的编译工具和依赖项。运行以下命令安装它们：\\n\\n```\\n\\nsudo yum install epel-release\\n\\nsudo yum install gcc gcc-c++ make automake autoconf \\\\\\n\\n    libtool-ltdl-devel gd-devel freetype-devel libxml2-devel \\\\\\n\\n    libjpeg-devel libpng-devel openssl-devel curl-devel \\\\\\n\\n    libmcrypt-devel libxslt-devel bzip2-devel libzip-devel\\n\\n```\\n\\n2. 下载PHP 5.6的源代码包。您可以从PHP 官方网","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:25.000+00:00","isPublic":"公开","typeId":4,"url":"/note/20#CentOS7编译安装php5.6"},{"id":10,"title":"宝塔面板关闭安全入口","content":"安全入口配置文件地址：\\n\\n```\\n/www/server/panel/data/admin_path.pl\\n```\\n\\n通过 SSH 终端连接服务器后执行以下命令：\\n\\n```\\nsudo mv /www/server/panel/data/admin_path.pl /www/server/panel/data/admin_path.pl.back\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:00.000+00:00","isPublic":"公开","typeId":4,"url":"/note/10#宝塔面板关闭安全入口"},{"id":8,"title":".desktop文件格式","content":"```\\n[Desktop Entry]\\nName=WebStorm\\nExec=/path/to/start.sh\\nIcon=/path/to/icon.png\\nType=Application\\nStartupNotify=false\\nTerminal=false\\n```\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:06.000+00:00","isPublic":"公开","typeId":4,"url":"/note/8#.desktop文件格式"},{"id":18,"title":"vue3+vite 安装less","content":"vue3+vite 安装less\\n```sh\\nnpm i less-loader less --save-dev\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:18.000+00:00","isPublic":"公开","typeId":3,"url":"/note/18#vue3+vite 安装less"},{"id":9,"title":"Linux查看端口占用","content":"linux查看端口占用\\n\\n```sh\\nlsof -i:port\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:03.000+00:00","isPublic":"公开","typeId":4,"url":"/note/9#Linux查看端口占用"},{"id":24,"title":"MySQL:ERROR 1819 (HY000)","content":"```mysql\\nERROR 1819 (HY000): Your password does not satisfy the current policy requirements\\n```\\n\\n关于这个问题是在 mysql 初始化时，使用临时密码，修改自定义密码时，由于自定义密码比较简单，就出现了不符合密码策略的问题。\\n\\n解决办法：\\n1.进入mysql\\n输入命令：\\n\\n```\\nmysql -root -p\\n```\\n\\n2、查看 mysql 初始的密码策略，\\n输入语句 :\\n\\n```mysql\\nSHOW VARIABLES LIKE ‘validate_password%’;\\n```\\n\\n进行查看，\\n\\n2、首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可，\\n输入设值语句 :\\n\\n```mysql\\nset global validate_","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:01.000+00:00","isPublic":"公开","typeId":6,"url":"/note/24#MySQL:ERROR 1819 (HY000)"},{"id":23,"title":"MySQL:ERROR 1698 (28000)","content":"```mysql\\nERROR 1698 (28000): Access denied for user \'root\'@\'localhost\'\\n```\\n\\n问题：登录root用户显示权限错误，\\n\\n```\\nubuntu@ubuntu:~$ mysql -u root -p\\nEnter password: \\nERROR 1698 (28000): Access denied for user \'root\'@\'localhost\'\\n```\\n\\n原因：是因为auth_socket的验证类型引起的。\\n\\n解决：\\n\\n1、通过sudo进入mysql，ubuntu默认sudo不需要密码就可以进\\n\\n```\\nsudo mysql\\n```\\n\\n2、进入mysql库\\n\\n```mysql\\nmysql> use mysql;\\n```\\n\\n3、改密码\\n\\n```mysql\\nALTER USER \'root\'@\'localhost\' ","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:59.000+00:00","isPublic":"公开","typeId":6,"url":"/note/23#MySQL:ERROR 1698 (28000)"},{"id":16,"title":"MySQL8修改密码","content":"MySql 从8.0开始修改密码有了变化，在user表加了字段authentication_string，修改密码前先检查authentication_string是否为空\\n\\n1、如果不为空\\n\\n```mysql\\nuse mysql; \\n```\\n\\n将字段置为空\\n\\n```mysql\\nupdate user set authentication_string=\'\' where user=\'root\';\\n```\\n\\n修改密码为123456\\n\\n```mysql\\nALTER user \'root\'@\'localhost\' IDENTIFIED BY \'123456\';\\n```\\n\\n2、如果为空，直接修改\\n\\n```mysql\\nALTER user \'root\'@\'localhost\' IDENTIFIED BY \'123456\';\\n```\\n\\n如果出现类似如下错误\\n\\n```mysql\\nERROR 1290 (","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:28.000+00:00","isPublic":"公开","typeId":6,"url":"/note/16#MySQL8修改密码"},{"id":26,"title":"MySQL:ERROR 1410 (42000)","content":"实质问题是,授权语法不严谨导致.所授权的用户及其所在主机名,要与实际存在的用户及其主机名一致.\\n\\n也就是说,如果已建用户是:root@localhost,你要授权给root@%,那肯定不行.必须一样才行.\\n\\n```mysql\\nmysql> grant select on *.* to \'root\';\\nERROR 1410 (42000): You are not allowed to create a user with GRANT\\n```\\n\\n1、修改主机\\n\\n```mysql\\nupdate user set host=\'%\' where user=\'root\';\\n```\\n\\n刷新权限\\n\\n```mysql\\nflush privileges;\\n```\\n\\n再次授权\\n\\n```mysql\\ngrant system_user on *.* to \'root\';\\n```\\n\\n2、若不修改主机，授权时要指明用","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:06.000+00:00","isPublic":"公开","typeId":6,"url":"/note/26#MySQL:ERROR 1410 (42000)"},{"id":22,"title":"MySQL8密码策略","content":"然后查看密码策略\\n\\n```mysql\\nSHOW VARIABLES LIKE \'validate_password%\';\\n```\\n\\n密码策略显示如下：\\n\\n```mysql\\nmysql> SHOW VARIABLES LIKE \'validate_password%\';\\n+--------------------------------------+--------+\\n| Variable_name                        | Value  |\\n+--------------------------------------+--------+\\n| validate_password.check_user_name    | ON     |\\n| validate_password.dictionary_file    |        |\\n| validate_pass","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:56.000+00:00","isPublic":"公开","typeId":6,"url":"/note/22#MySQL8密码策略"},{"id":25,"title":"MySQL:ERROR 1227 (42000)","content":"```mysql\\nERROR 1227 (42000): Access denied; you need (at least one of) the SYSTEM_USER privilege(s) for this operation\\n```\\n\\n原因：\\nMySQL8版本中新增了一个system_user帐户类型，由于root用户没有SYSTEM_USER权限，导致错误出现。\\n\\n为root添加权限：\\n\\n```mysql\\ngrant system_user on *.* to \'root\';\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:04.000+00:00","isPublic":"公开","typeId":6,"url":"/note/25#MySQL:ERROR 1227 (42000)"},{"id":21,"title":"Android 7.0 以上去除锁屏密码的方法","content":"# Android 7.0 以上去除锁屏密码的方法\\n\\n进入 TWRP Recovery 中，使用 adb shell 命令删除如下文件：\\n\\n```sh\\nrm /data/system/locksettings.db\\nrm /data/system/locksettings.db-shm\\nrm /data/system/locksettings.db-wal\\nrm /data/system/gatekeeper.password.key\\nrm /data/system/gatekeeper.pattern.key\\n```\\n\\n以下文件也删除（如果有的话）：\\n\\n```sh\\nrm /data/system/fingerprintpassword.key\\nrm /data/system/personal.key\\nrm /data/system/gesture.key\\nrm /data/system/","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:52:42.000+00:00","isPublic":"公开","typeId":5,"url":"/note/21#Android 7.0 以上去除锁屏密码的方法"},{"id":17,"title":"MySQL8创建用户","content":"创建用户\\n```mysql\\ncreate user username@localhost\\n    identified by \'password\';\\n\\ngrant alter, alter routine, create, create routine, create temporary tables, create view, delete, drop, event, execute, grant option, index, insert, lock tables, references, select, show view, trigger, update on databasename.* to username@localhost;\\n```\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:30.000+00:00","isPublic":"公开","typeId":6,"url":"/note/17#MySQL8创建用户"},{"id":27,"title":"MySQL查看端口","content":"MySQL查看端口的sql语句：\\n\\n```mysql\\nshow global variables like \'port\';\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:07.000+00:00","isPublic":"公开","typeId":6,"url":"/note/27#MySQL查看端口"},{"id":19,"title":"node运行报错：opensslErrorStack","content":"## 问题描述\\n\\n报错如下:\\n\\n``` sh\\n  opensslErrorStack: [ \'error:03000086:digital envelope routines::initialization error\' ],\\n  library: \'digital envelope routines\',\\n  reason: \'unsupported\',\\n  code: \'ERR_OSSL_EVP_UNSUPPORTED\'\\n```\\n\\n## 解决方案\\n\\n1. 经查：问题原因是因为 node 17版本中的openssl和14版本的不同（老项目原本可以在node14版本下运行的）\\n2. 解决方案，找到package.json 文件，加上：`set NODE_OPTIONS=--openssl-legacy-provider &&` 如下：\\n\\n``` \\n  \\"server\\": \\"set NODE_","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:55:17.000+00:00","isPublic":"公开","typeId":7,"url":"/note/19#node运行报错：opensslErrorStack"},{"id":15,"title":"centos7开放端口","content":"查看防火墙状态\\n\\n```sh\\nsystemctl status firewalld\\n```\\n\\n开启防火墙\\n\\n```sh\\nsystemctl start firewalld\\n```\\n\\n关闭防火墙\\n\\n```sh\\nsystemctl stop firewalld\\n```\\n\\n查看想开的端口是否已开\\n\\n```sh\\nfirewall-cmd --query-port=80/tcp\\n```\\n\\n开放端口号\\n\\n```sh\\nfirewall-cmd --add-port=80/tcp --permanent\\n```\\n\\n开通一个范围的端口\\n\\n```sh\\nfirewall-cmd --add-port=80-8080/tcp --permanent\\n```\\n\\n重新载入配置使配置生效\\n\\n```sh\\n firewall-cmd --reload\\n```\\n\\n关闭端口\\n\\n```sh\\n firewall-cmd --per","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:33.000+00:00","isPublic":"公开","typeId":4,"url":"/note/15#centos7开放端口"},{"id":14,"title":"Linux下nodejs配置环境变量","content":"<br/>\\n\\n```sh\\nsudo vim /etc/profile\\n```\\n\\n或\\n\\n```sh\\nsudo gedit /etc/profile\\n```\\n\\n然后在末尾添加：\\n\\n```sh\\nexport NODEJS_HOME=/opt/node\\nexport PATH=$NODEJS_HOME/bin:$PATH\\n```\\n\\n保存并退出，然后键入：\\n\\n```sh\\nsource /etc/profile\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:51.000+00:00","isPublic":"公开","typeId":4,"url":"/note/14#Linux下nodejs配置环境变量"},{"id":12,"title":"Linux下maven环境变量配置","content":"```sh\\nsudo vim /etc/profile\\n```\\n\\n或\\n\\n```sh\\nsudo gedit /etc/profile\\n```\\n\\n然后在末尾添加：\\n\\n```sh\\nexport MAVEN_HOME=/opt/maven\\nexport PATH=$MAVEN_HOME/bin:$PATH\\n```\\n\\n保存并退出，然后键入：\\n\\n```sh\\nsource /etc/profile\\n```\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:47.000+00:00","isPublic":"公开","typeId":4,"url":"/note/12#Linux下maven环境变量配置"},{"id":6,"title":"npm使用国内镜像加速","content":"1. 修改镜像源\\n   - 华为云\\n     ```\\n     npm config set registry https://mirrors.huaweicloud.com/repository/npm/\\n     ```\\n   - 腾讯云\\n     ```\\n     npm config set registry http://mirrors.cloud.tencent.com/npm/\\n     ```\\n   - 淘宝\\n     ```\\n     npm config set registry https://registry.npmmirror.com\\n     ```\\n\\n2. 使用淘宝定制的cnpm安装\\n   1. 安装cnpm\\n      ```\\n      npm install -g cnpm --registry=https://registry.npmmirror.co","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:54:46.000+00:00","isPublic":"公开","typeId":7,"url":"/note/6#npm使用国内镜像加速"},{"id":28,"title":"MySQL创建用户并授权","content":"MySQL创建用户并授权SQL:\\n\\n```mysql\\ncreate user user@localhost\\n    identified by \'password\';\\n\\ngrant alter, \\nalter routine, \\ncreate, \\ncreate routine, \\ncreate temporary tables,\\ncreate view, \\ndelete, \\ndrop, \\nevent, \\nexecute, \\ngrant option, \\nindex, \\ninsert, \\nlock tables, \\nreferences, \\nselect, \\nshow view, \\ntrigger, \\nupdate on databasename.* to user@localhost;\\n```\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:55:25.000+00:00","isPublic":"公开","typeId":6,"url":"/note/28#MySQL创建用户并授权"},{"id":13,"title":"Linux下jdk8环境变量配置","content":"全局配置\\n\\n```sh\\nsudo vim /etc/profile\\n```\\n\\n或\\n\\n```sh\\nsudo gedit /etc/profile\\n```\\n\\n然后在末尾添加：\\n\\n```sh\\nexport JAVA_HOME=/opt/jdk8\\nexport PATH=$JAVA_HOME/bin:$PATH\\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib\\n```\\n\\n保存并退出，然后键入：\\n\\n```sh\\nsource /etc/profile\\n```\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:53:50.000+00:00","isPublic":"公开","typeId":4,"url":"/note/13#Linux下jdk8环境变量配置"},{"id":29,"title":"MySQL in Linux 大小写问题","content":"`linux`的`mysql`**区分大小写**，数据库中的表名与输入的sql语句中的使用的表名大小写不一致会出错","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:55:25.000+00:00","isPublic":"公开","typeId":6,"url":"/note/29#MySQL in Linux 大小写问题"},{"id":7,"title":"配置nodejs环境","content":"```sh\\nnpm config set cache \\"/home/xclhove/nodejs/node_cache\\"\\n```\\n\\n```sh\\nnpm config set prefix \\"/home/xclhove/nodejs/node_global\\"\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:54:36.000+00:00","isPublic":"公开","typeId":7,"url":"/note/7#配置nodejs环境"},{"id":35,"title":"springboot跨域配置","content":"```java\\nCorsConfig.java\\n```\\n\\n中：\\n\\n```java\\npackage top.xclhove.spring.config;\\n\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.web.cors.CorsConfiguration;\\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\\nimport org.springframework.web.filter.CorsFilter;\\n\\n@Configuration\\npublic class CorsCon","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:56:31.000+00:00","isPublic":"公开","typeId":9,"url":"/note/35#springboot跨域配置"},{"id":4,"title":"maven settings.xml配置","content":"maven3.9.4\\n\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<settings\\n    xmlns=\\"http://maven.apache.org/SETTINGS/1.2.0\\"\\n    xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n    xsi:schemaLocation=\\"http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd\\">\\n    <!-- 本地仓库 -->\\n    <localRepository>${user.home}/MavenRepository</localRepository>\\n    <pluginGroups></plug","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:56:20.000+00:00","isPublic":"公开","typeId":10,"url":"/note/4#maven settings.xml配置"},{"id":34,"title":"maven pom.xml配置阿里云仓库","content":"pom配置，放在***project标签内的末尾***:\\n\\n```xml\\n<repositories>\\n        <repository>\\n            <id>aliyun</id>\\n            <name>aliyun</name>\\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\\n            <layout>default</layout>\\n            <releases>\\n                <enabled>true</enabled>\\n                <updatePolicy>never</updatePolicy>\\n            </releases>\\n            <sna","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:56:16.000+00:00","isPublic":"公开","typeId":10,"url":"/note/34#maven pom.xml配置阿里云仓库"},{"id":33,"title":"springboot yml特殊字符","content":"application.yml文件：\\n\\n```yaml\\nymlString: c:\\\\windows\\\\test #没有\\"\\" \\\\t不会被转义\\nymlString2: \\"c:\\\\windows\\\\test\\" #加上\\"\\" \\\\t会被转义\\n```\\n\\njava:\\n\\n```java\\n@Value(\\"ymlString\\")\\npublic static String javaString;\\n@Value(\\"ymlString2\\")\\npublic static String javaString2;\\n\\nSystem.out.println(\\"javaString==>\\" + javaString);//没有\\"\\" \\\\t不会被转义\\nSystem.out.println(\\"javaString2==>\\" + javaString2);//加上\\"\\" \\\\t会被转义\\n//javaString==>c:\\\\windows\\\\test","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:56:01.000+00:00","isPublic":"公开","typeId":9,"url":"/note/33#springboot yml特殊字符"},{"id":36,"title":"fasijson2的maven坐标","content":"pom.xml\\n\\n```xml\\n<!--fastjson2-->\\n<dependency>\\n    <groupId>com.alibaba.fastjson2</groupId>\\n    <artifactId>fastjson2</artifactId>\\n    <version>2.0.39</version>\\n</dependency>\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:56:41.000+00:00","isPublic":"公开","typeId":10,"url":"/note/36#fasijson2的maven坐标"},{"id":37,"title":"lombak mavem坐标","content":"pom.xml\\n\\n```xml\\n<!-- lombok -->\\n<dependency>\\n    <groupId>org.projectlombok</groupId>\\n    <artifactId>lombok</artifactId>\\n    <version>1.18.26</version>\\n</dependency>\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:56:53.000+00:00","isPublic":"公开","typeId":10,"url":"/note/37#lombak mavem坐标"},{"id":32,"title":"springboot yml文件中的变量引用","content":"application.yml文件：\\n\\n```yaml\\nuserDir: /home/user\\n\\n#使用${属性名}引用数据\\ncodeDir: ${userDir}/code\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:55:59.000+00:00","isPublic":"公开","typeId":9,"url":"/note/32#springboot yml文件中的变量引用"},{"id":50,"title":"springboot自定义yml配置(配合lombak使用)","content":"`application.yml`\\n\\n```yaml\\napplication:\\n admin:\\n   allow-delete: enabled\\n   allow-register: enabled\\n```\\n\\n`AdminConfig.java`\\n\\n```java\\n/**\\n * 管理员相关配置\\n *\\n * @author xclhove\\n */\\n@Component\\n@ConfigurationProperties(prefix = \\"cheetah.admin\\")\\n@Data\\n@AllArgsConstructor\\n@NoArgsConstructor\\npublic class AdminConfig {\\n    private AllowRegister allowRegister;\\n    private AllowDelete allowDelete;\\n}\\n```\\n\\n`AllowD","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:57:34.000+00:00","isPublic":"公开","typeId":9,"url":"/note/50#springboot自定义yml配置(配合lombak使用)"},{"id":55,"title":"docker安装shadowsocks-rust","content":"`config.json`:\\n```json\\n{\\n    \\"server\\":\\"0.0.0.0\\",\\n    \\"server_port\\":8000,\\n    \\"password\\":\\"123456\\",\\n    \\"timeout\\":300,\\n    \\"method\\":\\"aes-256-gcm\\",\\n    \\"nameserver\\":\\"8.8.8.8\\",\\n    \\"mode\\":\\"tcp_and_udp\\"\\n}\\n```\\n## 服务端\\n``` sh\\nsudo docker run -d \\\\\\n -p 8000:8000 \\\\\\n -p 8000:8000/udp \\\\\\n --name shadowsocks-rust \\\\\\n --restart=always \\\\\\n -v /root/shadowsocks:/etc/shadowsocks-rust \\\\\\n teddysun/shadowsocks-rust\\n```\\n\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:57:56.000+00:00","isPublic":"公开","typeId":8,"url":"/note/55#docker安装shadowsocks-rust"},{"id":48,"title":"docker安装minio(对象存储oss)","content":"# docker安装minio(对象存储oss)\\n\\n```sh\\nsudo docker run --name minio \\\\\\n -p 9090:9000 \\\\\\n -p 9999:9999 \\\\\\n -d --restart=always \\\\\\n -e \\"MINIO_ROOT_USER=admin\\" \\\\\\n -e \\"MINIO_ROOT_PASSWORD=12345678\\" \\\\\\n -v /root/docker/minio/data:/data \\\\\\n -v /root/docker/minio/config:/root/.minio \\\\\\n minio/minio \\\\\\n server /data \\\\\\n --console-address \'0.0.0.0:9999\'\\n```\\n\\n安装完后访问:[**http://localhost:9090**](http://localhost:9090)即可。\\n\\n[(","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:57:24.000+00:00","isPublic":"公开","typeId":8,"url":"/note/48#docker安装minio(对象存储oss)"},{"id":46,"title":"git reset的三种模式","content":"git reset的三种模式\\n\\n|模式|工作区状态|暂存区状态|\\n|------|---------------|---------------|\\n|`git reset --sort`|保留|保留|\\n|`git reset --hard`|不保留|不保留|\\n|`git reset --mixed`|保留|不保留|","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:57:15.000+00:00","isPublic":"公开","typeId":2,"url":"/note/46#git reset的三种模式"},{"id":56,"title":"docker安装ipsec","content":"``` sh\\ndocker run \\\\\\n    --name ipsec \\\\\\n    --restart=always \\\\\\n    -v /root/ipsec/data:/etc/ipsec.d \\\\\\n    -v /root/ipsec/lib:/lib/modules:ro \\\\\\n    -p 500:500/udp \\\\\\n    -p 4500:4500/udp \\\\\\n    -d --privileged \\\\\\n\\t\\t-e VPN_IPSEC_PSK=ipsec_psk \\\\\\n\\t\\t-e VPN_USER=xclhove \\\\\\n\\t\\t-e VPN_PASSWORD=123456 \\\\\\n    hwdsl2/ipsec-vpn-server\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:57:59.000+00:00","isPublic":"公开","typeId":8,"url":"/note/56#docker安装ipsec"},{"id":54,"title":"docker安装onlyoffice","content":"`docker`安装`onlyoffice`\\n\\n\\n```sh\\nsudo docker run -i -t -d \\\\\\n -p 8001:80 \\\\\\n --name=onlyoffice \\\\\\n --restart=always \\\\\\n -e JWT_ENABLED=false \\\\\\n onlyoffice/documentserver-de\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:57:54.000+00:00","isPublic":"公开","typeId":8,"url":"/note/54#docker安装onlyoffice"},{"id":38,"title":"hutool maven坐标","content":"pom.xml\\n\\n```xml\\n<!-- hutool -->\\n<dependency>\\n  <groupId>cn.hutool</groupId>\\n  <artifactId>hutool-all</artifactId>\\n  <version>5.8.21</version>\\n</dependency>\\n```\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:56:55.000+00:00","isPublic":"公开","typeId":10,"url":"/note/38#hutool maven坐标"},{"id":49,"title":"Android Stdio配置代理","content":"阿里云\\n```\\nhttps://mirrors.aliyun.com/android.googlesource.com/\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:57:28.000+00:00","isPublic":"公开","typeId":5,"url":"/note/49#Android Stdio配置代理"},{"id":140,"title":"推送 docker 镜像到 github","content":"# 推送 docker 镜像到 github\\n\\n## 获取 PAT\\n\\n![image.png](/api/image/name/1_114cb68e799a8bdebac280a2d628df8d.png)\\n\\n![image.png](/api/image/name/1_f6c0bfe0c151db857a3e2695fea191f1.png)\\n\\n![image.png](/api/image/name/1_f46e838a35084c7f8cd4ae29f36c2626.png)\\n\\n![image.png](/api/image/name/1_e4d7315cff863ef8fb9a43518b2c2e71.png)\\n\\n![image.png](/api/image/name/1_a1c894e142e6fa505cdc061a0e63b7fa.png)\\n\\n这样就拿到 **PAT** 了","userId":1,"releaseTime":"2024-10-04T23:23:49.000+00:00","updateTime":"2024-10-11T05:00:35.000+00:00","isPublic":"公开","typeId":8,"url":"/note/140#推送 docker 镜像到 github"},{"id":53,"title":"springboot值为null的属性不返回","content":"当name和age都有值的时候返回结果如下：\\n\\n``` json\\n{\\n\\t\\"name\\":\\"Jack\\"，\\n\\t\\"age\\":18\\n}\\n```\\n\\n当age的值为null的时候返回结果如下：\\n\\n``` json\\n{\\n\\t\\"age\\":18\\n}\\n```\\n\\n1. 使用注解的方式\\n在类或者变量上面加上下面这个注解\\n\\n``` java\\n@JsonInclude(NON_NULL)\\n```\\n\\n2. 在yum文件里面配置\\n\\n``` yaml\\nspring:\\n    jackson:\\n    \\tdefault-property-inclusion: NON_EMPTY\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:58:08.000+00:00","isPublic":"公开","typeId":9,"url":"/note/53#springboot值为null的属性不返回"},{"id":76,"title":"git下载镜像站","content":"# git下载镜像站\\n\\n* 淘宝镜像（存在防盗链，请复制链接到新页面打开，否则会出现**403**）：https://registry.npmmirror.com/binary.html?path=git-for-windows/\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:00:43.000+00:00","isPublic":"公开","typeId":2,"url":"/note/76#git下载镜像站"},{"id":59,"title":"Could not load the Qt platform plugin “xcb“","content":"# Could not load the Qt platform plugin “xcb“\\n\\n[Could not load the Qt platform plugin “xcb“](https://blog.csdn.net/Fozei/article/details/116160454)","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:01:11.000+00:00","isPublic":"公开","typeId":4,"url":"/note/59#Could not load the Qt platform plugin “xcb“"},{"id":139,"title":".npmrc","content":"# .npmrc\\n\\n\\n## Electron\\n\\n```\\nelectron_mirror=https://npmmirror.com/mirrors/electron/\\nelectron_builder_binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/\\n\\n```\\n","userId":1,"releaseTime":"2024-10-04T16:06:28.000+00:00","updateTime":"2024-10-11T05:00:40.000+00:00","isPublic":"公开","typeId":7,"url":"/note/139#.npmrc"},{"id":68,"title":"docker安装ChatGPT-Next-Web","content":"``` sh\\ndocker run -d -p 3000:3000 \\\\\\n   -e OPENAI_API_KEY=sk-xxxx \\\\\\n   -e CODE=页面访问密码 \\\\\\n   yidadaa/chatgpt-next-web\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:00:51.000+00:00","isPublic":"公开","typeId":8,"url":"/note/68#docker安装ChatGPT-Next-Web"},{"id":69,"title":"java发送邮件","content":"1. maven坐标\\n``` xml\\n<!--spring-boot-starter-mail-->\\n<dependency>\\n\\t<groupId>org.springframework.boot</groupId>\\n\\t<artifactId>spring-boot-starter-mail</artifactId>\\n</dependency>\\n```\\n2. 测试代码\\n``` java\\nimport org.junit.jupiter.api.Test;\\nimport org.springframework.boot.test.context.SpringBootTest;\\n\\nimport javax.mail.*;\\nimport javax.mail.internet.InternetAddress;\\nimport javax.mail.internet.MimeMessage;\\nimp","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:01:25.000+00:00","isPublic":"公开","typeId":14,"url":"/note/69#java发送邮件"},{"id":73,"title":"nodejs express跨域","content":"# nodejs express跨域\\n\\n在Node.js中，可以使用以下方法来设置跨域请求：\\n\\n1. 使用`cors`模块：`cors`是一个Node.js中的跨域资源共享中间件，可以在Express应用程序中使用它。首先，你需要安装`cors`模块：\\n\\n```shell\\nnpm install cors\\n```\\n\\n然后，在你的Express应用程序中，使用以下代码启用跨域请求：\\n\\n```javascript\\nconst express = require(\'express\');\\nconst cors = require(\'cors\');\\n\\nconst app = express();\\n\\napp.use(cors());\\n\\n// 其他路由和中间件\\n\\napp.listen(3000, () => {\\n  console.log(\'Server is running on port 3000\'","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:01:50.000+00:00","isPublic":"公开","typeId":15,"url":"/note/73#nodejs express跨域"},{"id":82,"title":"MySQL批量操作优化","content":"# MySQL批量操作优化\\n\\n`rewriteBatchedStatements=true` 是MySQL数据库连接驱动程序的一个参数，用于优化批量插入操作的性能。当这个参数设置为true时，MySQL会将批量插入语句重写为更高效的形式，以减少与服务器的通信次数，从而提高插入操作的速度。\\n\\n在默认情况下，MySQL的JDBC驱动程序会将批量插入语句拆分为单个的插入语句，然后逐个发送给服务器执行。这样的做法会导致频繁的网络通信和服务器执行的开销，特别是在需要插入大量数据时，性能会受到影响。\\n\\n通过将`rewriteBatchedStatements`参数设置为true，MySQL的JDBC驱动程序会将多个插入值列表合并为一个大的插入语句，发送给服务器执行。这样可以减少与服务器的通信次数，提高插入操作的效率。\\n\\n需要注意的是，使用`rewriteBatchedStatements=true`参","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:02:43.000+00:00","isPublic":"公开","typeId":6,"url":"/note/82#MySQL批量操作优化"},{"id":84,"title":"在Ubuntu里安装Flatpak软件应用无图标的问题","content":"# 在Ubuntu里安装Flatpak软件应用无图标的问题\\n\\n## 解决思路：手动将图标添加到系统默认的路径下面\\n\\n以在`Flatpak`下安装`OBS`为例，可手动将`/var/lib/flatpak/app/com.obsproject.Studio/current/active/export/share/applications/com.obsproject.Studio.desktop`文件复制到`/usr/share/applications`目录中。\\n\\n```sh\\nsudo cp \\\\\\n /var/lib/flatpak/app/com.obsproject.Studio/current/active/export/share/applications/com.obsproject.Studio.desktop \\\\\\n /usr/share/applications\\n```\\n\\n图标","userId":1,"releaseTime":"2024-01-28T23:37:04.000+00:00","updateTime":"2024-10-11T05:02:46.000+00:00","isPublic":"公开","typeId":4,"url":"/note/84#在Ubuntu里安装Flatpak软件应用无图标的问题"},{"id":80,"title":"ubuntu安装openjdk","content":"# ubuntu安装openjdk\\n\\n要在Ubuntu上安装OpenJDK 8、11和17，可以按照以下步骤进行操作：\\n\\n1. 打开终端。\\n2. 安装OpenJDK 8：\\n\\n```sh\\nsudo apt install openjdk-8-jdk -y\\n```\\n\\n3. 安装OpenJDK 11：\\n\\n```sh\\nsudo apt install openjdk-11-jdk -y\\n```\\n\\n4. 安装OpenJDK 17：\\n\\n```sh\\nsudo apt install openjdk-17-jdk -y\\n```\\n\\n在Ubuntu上安装多个版本的OpenJDK后，您可以使用`update-alternatives`命令来切换默认的Java版本。使用以下命令列出当前系统上已安装的Java版本以及其路径：\\n\\n```sh\\nsudo update-alternatives --config java","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:02:32.000+00:00","isPublic":"公开","typeId":4,"url":"/note/80#ubuntu安装openjdk"},{"id":79,"title":"ubuntu安装nvidia驱动","content":"# ubuntu安装nvidia驱动\\n\\n1. 查看驱动列表\\n\\n```sh\\nsudo ubuntu-drivers devices\\n```\\n\\n结果：\\n\\n```\\nuser@ubuntu:~$ sudo ubuntu-drivers devices\\nvendor   : NVIDIA Corporation\\nmodel    : TU106M [GeForce RTX 2060 Mobile]\\ndriver   : nvidia-driver-470 - distro non-free\\ndriver   : nvidia-driver-525-open - distro non-free\\ndriver   : nvidia-driver-535-server - distro non-free\\ndriver   : nvidia-driver-525-server - distro non-fr","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:02:29.000+00:00","isPublic":"公开","typeId":4,"url":"/note/79#ubuntu安装nvidia驱动"},{"id":81,"title":"ubuntu设置桌面程序自启动","content":"# ubuntu设置桌面程序自启动\\n\\n复制`app.desktop`文件到`~/.config/autostart`目录即可。\\n\\n如：\\n\\n```sh\\ncp /usr/share/applications/network-speed.desktop ~/.config/autostart/\\n```\\n\\n## 附\\n[.desktop文件格式](https://xnote.xclhove.top/preview/8)","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:02:36.000+00:00","isPublic":"公开","typeId":4,"url":"/note/81#ubuntu设置桌面程序自启动"},{"id":85,"title":"flatpak设置国内镜像源","content":"# flatpak设置国内源\\n\\n1. 上海交通大学的flatpak源\\n\\n\\t```sh\\n\\tsudo flatpak remote-modify flathub --url=https://mirror.sjtu.edu.cn/flathub\\n\\t```","userId":1,"releaseTime":"2024-01-28T23:40:22.000+00:00","updateTime":"2024-10-11T05:02:48.000+00:00","isPublic":"公开","typeId":4,"url":"/note/85#flatpak设置国内镜像源"},{"id":58,"title":"Centos7关闭邮件服务","content":"```sh\\nsudo systemctl stop postfix\\nsudo systemctl disable postfix\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T04:58:02.000+00:00","isPublic":"公开","typeId":4,"url":"/note/58#Centos7关闭邮件服务"},{"id":105,"title":"SpringBoot IOC容器初始化流程","content":"# springboot IOC容器初始化流程\\n\\nIOC容器的初始化是在 `AbstractApplicationContext.run`中完成的。\\n\\n在`refresh`方法中主要做这几件事：\\n\\n1. 准备`BeanFactory`，会给`BeanFactory`设置很多属性，如类加载器、Environment等。\\n2. 执行`BeanFactoryPostPresser`（后置处理器），这一阶段会扫描要放入容器中的Bean信息，得到对应的。`BeanDefinition`（只扫描，不创建）。\\n3. 注册`BeanPostProsser`。\\n4. 启动`tomcat`。\\n5. 实例化容器中**非懒加载**的**单例**Bean。\\n6. 容器初始化完成后做一些收尾工作，如清除缓存等。\\n\\n在IOC容器初始化过程中，首先准备`BeanFactory`并执行`BeanFactoryPostPro","userId":1,"releaseTime":"2024-06-12T15:08:36.000+00:00","updateTime":"2024-10-11T05:03:40.000+00:00","isPublic":"公开","typeId":9,"url":"/note/105#SpringBoot IOC容器初始化流程"},{"id":86,"title":"docker部署openvpn","content":"# docker部署openvpn\\n\\n## 拉取openvpn镜像\\n\\n```sh\\n\\tsudo docker pull chenji1506/openvpn:2.4.8\\n```\\n\\n## 创建目录\\n\\n```sh\\nsudo mkdir -pv /data/openvpn/conf\\n```\\n\\n## 生成配置文件\\n\\n***1.1.1.1**是本机的公网IP，按需改成自己的IP*\\n\\n```sh\\ndocker run -v /data/openvpn:/etc/openvpn --rm chenji1506/openvpn:2.4.8 ovpn_genconfig -u udp://1.1.1.1\\n```\\n\\n## 生成密钥文件\\n\\n```sh\\ndocker run -v /data/openvpn:/etc/openvpn --rm -it chenji1506/openvpn:2.4.8 ovpn_in","userId":1,"releaseTime":"2024-01-29T00:08:02.000+00:00","updateTime":"2024-10-11T05:02:54.000+00:00","isPublic":"公开","typeId":8,"url":"/note/86#docker部署openvpn"},{"id":115,"title":"springboot2整合swagger2","content":"# springboot2整合swagger2\\n\\n## pom坐标\\n\\n`pom.xml`：\\n\\n```xml\\n<!-- swagger-ui -->\\n        <dependency>\\n            <groupId>io.springfox</groupId>\\n            <artifactId>springfox-swagger-ui</artifactId>\\n            <version>2.9.2</version>\\n        </dependency>\\n        <!-- swagger2 -->\\n        <dependency>\\n            <groupId>io.springfox</groupId>\\n            <artifactId>springfox-swagger2</artifactI","userId":1,"releaseTime":"2024-07-02T10:41:14.000+00:00","updateTime":"2024-10-11T05:03:52.000+00:00","isPublic":"公开","typeId":9,"url":"/note/115#springboot2整合swagger2"},{"id":102,"title":"SpringBoot启动流程","content":"# SpringBoot启动流程\\n\\n`SpringBoot`启动，其本质就是加载各种配置信息，然后初始化IOC容器并返回。\\n\\n首先，在启动类执行`SpringApplication.run`时，`run`方法主要做两件事：\\n\\n1. 创建`SpringApplication`对象；\\n2. 执行`SpringApplication`对象的`run`方法。\\n\\n其次，创建`SpringApplication`时，构造方法主要做三件事情：\\n\\n1. 确认web应用类型，一般是`Servlet`类型，`Servlet`类型将来会启动一个`tomcat`；\\n2. 从`spring.factories`配置文件中加载默认的`ApplicationContextInitializer`和`ApplicationListener`;\\n3. 记录当前的主启动类，将来用作包扫描。\\n\\n最后，对象创建好了以后，调用`S","userId":1,"releaseTime":"2024-05-31T09:47:28.000+00:00","updateTime":"2024-10-11T05:03:31.000+00:00","isPublic":"公开","typeId":9,"url":"/note/102#SpringBoot启动流程"},{"id":122,"title":"SpringBoot Bean的循环依赖","content":"# SpringBoot Bean的循环依赖\\n\\n循环依赖：指A依赖B，B又依赖A这样的依赖循环问题。在spring中通过`DefaultSingletonBeanRegistry`的三个对象缓存区解决循环依赖问题：\\n\\n* `singletonObjects`：存储实例化完成且完成依赖注入的Bean。\\n* `earlySingletonObjects`：存储实例化完成但未完成依赖注入的Bean。\\n* `singletonFactories`：存储创建Bean的ObjectFactory。\\n\\n假设现在有A和B，且A依赖B，B又依赖A，则Bean的创建过程是这样的：\\n\\n1. 调用A的构造方法实例化A，此时A还未完成依赖注入，封装一个**A的ObjectFactory**并放入`singletonFactories`。\\n2. 处理A的依赖注入，但此时没有B，则调用B的构造方法实例化B，此时B还未完","userId":1,"releaseTime":"2024-07-15T16:06:17.000+00:00","updateTime":"2024-10-11T05:04:03.000+00:00","isPublic":"公开","typeId":9,"url":"/note/122#SpringBoot Bean的循环依赖"},{"id":121,"title":"SpringBoot Bean生命周期","content":"# SpringBoot Bean生命周期\\n\\nSpringBoot中Bean的生命周期总的来说有四个阶段：\\n\\n1. 创建对象：调用**构造方法**实例化对象，然后进行**依赖注入**以填充该对象的内容。\\n2. 初始化对象：\\n   1. 执行`Aware`接口的回调方法。\\n   2. 执行`BeanPostProcessor`接口的`postProcessBeforeInitialization`方法。\\n   3. 执行`InitializingBean`接口的回调方法`afterPropertiesSet`（优先执行有`@PostConstruct`注解的方法）。\\n   4. 执行`BeanPostProcessor`接口的`postProcessAfterInitialization`方法。\\n3. 在代码中使用Bean.\\n4. 在容器销毁前回销毁对象，会执行`DisposableBean","userId":1,"releaseTime":"2024-07-15T14:57:28.000+00:00","updateTime":"2024-10-11T05:04:01.000+00:00","isPublic":"公开","typeId":9,"url":"/note/121#SpringBoot Bean生命周期"},{"id":97,"title":".npmrc设置electron镜像","content":"`.npmrc`:\\n\\n```\\nelectron_mirror=https://npmmirror.com/mirrors/electron/\\nelectron_builder_binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/\\n```\\n","userId":1,"releaseTime":"2024-04-09T00:41:31.000+00:00","updateTime":"2024-10-11T05:03:25.000+00:00","isPublic":"公开","typeId":12,"url":"/note/97#.npmrc设置electron镜像"},{"id":93,"title":"vue使用history模式打包后出现404","content":"# vue使用history模式打包后出现404\\n\\n当我们设置了mode为history时，当前端发送路径给服务端时，服务端根本就不认识省去#的url，所以返回给我们404，因为vue是单一页面所有的页面都在index.html中，vue是用js来切换页面的\\n\\n使用nginx服务器需添加以下配置：\\n```\\nlocation / {\\n\\ttry_files $uri $uri/ /index.html; \\n}\\n```","userId":1,"releaseTime":"2024-03-01T17:18:24.000+00:00","updateTime":"2024-10-11T05:04:45.000+00:00","isPublic":"公开","typeId":13,"url":"/note/93#vue使用history模式打包后出现404"},{"id":124,"title":"Java中方法的基本内存原理","content":"# Java中方法的基本内存原理\\n\\nthis的本质：代表方法调用者的地址值。\\n\\n## 基本概念\\n\\n* 堆：`new`出来的都在堆内存中开辟一个小空间。\\n* 栈（先进后出/后进先出）：方法运行时使用的内存，运行方法入栈，运行完毕出栈。\\n* 基本数据类型：整数、浮点数、布尔、字符。\\n* 引用数据类型：除了**基本数据类型**之外的其他类型。\\n\\n## 值传递\\n\\n传递基本数据类型时，传递的是真实的数据，形参的改变，不影响实际参数的值。\\n\\n## 引用传递\\n\\n传递引用数据类型时，传递的是地址值，形参的改变，影响实际参数的值。\\n","userId":1,"releaseTime":"2024-07-15T17:22:03.000+00:00","updateTime":"2024-10-11T05:04:16.000+00:00","isPublic":"公开","typeId":14,"url":"/note/124#Java中方法的基本内存原理"},{"id":92,"title":"vue设置路径别名","content":"# vue设置路径别名\\n\\n`vite`中添加下列高亮代码行的配置`vite.config.js`/`vite.config.js`:\\n\\n```json\\nimport { defineConfig } from \\"vite\\";\\nimport vue from \\"@vitejs/plugin-vue\\";\\nimport topLevelAwait from \\"vite-plugin-top-level-await\\";\\nimport { fileURLToPath, URL } from \\"node:url\\";\\n\\nexport default defineConfig({\\n    resolve: {\\n        alias: {\\n            \\"@\\": fileURLToPath(new URL(\\"./src\\", import.meta.url)),\\n        },\\n    ","userId":1,"releaseTime":"2024-02-29T20:12:37.000+00:00","updateTime":"2024-10-11T05:04:41.000+00:00","isPublic":"公开","typeId":13,"url":"/note/92#vue设置路径别名"},{"id":126,"title":"Java字符串相关类的底层原理","content":"# Java字符串相关类的底层原理\\n\\n## 字符串存储的内存原理\\n\\n* 直接赋值会复用字符串常量池中的（相同字符串的地址相同）\\n  ```java\\n  String s3 = \\"s3\\";\\n  String s4 = \\"s3\\";\\n  System.out.println(s1 == s2);  // true\\n  ```\\n* `new`出来不会复用，而是开辟一个新的空间（相同字符串的地址不同）\\n  ```java\\n  String s1 = new String(\\"s1\\");\\n  String s2 = new String(\\"s1\\");\\n  System.out.println(s1 == s2);  // false\\n  ```\\n\\n## ‘==’号比较的到底是什么？\\n\\n* 基本数据类型比较**数据值**\\n* 引用数据类型比较**地址值**\\n","userId":1,"releaseTime":"2024-07-15T18:57:31.000+00:00","updateTime":"2024-10-11T05:04:29.000+00:00","isPublic":"公开","typeId":14,"url":"/note/126#Java字符串相关类的底层原理"},{"id":125,"title":"Java中一个对象的内存图","content":"# Java中一个对象的内存图\\n\\n```java\\nUser user = new User(\\"张三\\", 18);\\n```\\n\\n1. 加载`User`的class文件（方法区）\\n2. 声明局部变量`user`（栈）\\n3. 在**堆**内存开辟空间\\n4. 默认初始化\\n5. 显示初始化\\n   ```java\\n   public class User {\\n       private String name = \\"李四\\";\\n       private int age = 20;\\n   }\\n   ```\\n6. 构造方法初始化\\n   ```java\\n   new User(\\"张三\\", 18);\\n   ```\\n7. 将堆内存的地址赋值给`user`\\n","userId":1,"releaseTime":"2024-07-15T18:06:31.000+00:00","updateTime":"2024-10-11T05:04:21.000+00:00","isPublic":"公开","typeId":14,"url":"/note/125#Java中一个对象的内存图"},{"id":128,"title":"Docker容器网络互联","content":"# Docker容器网络互联\\n\\n## 常见命令\\n\\n| 命令                                                        | 说明                   |\\n| ----------------------------------------------------------- | ---------------------- |\\n| `docker network create <newworkName>`                     | 创建网络               |\\n| `docker network ls`                                       | 查看所有网络           |\\n| `docker network rm <newworkName>`  ","userId":1,"releaseTime":"2024-07-16T12:29:06.000+00:00","updateTime":"2024-10-11T05:04:53.000+00:00","isPublic":"公开","typeId":8,"url":"/note/128#Docker容器网络互联"},{"id":91,"title":"Vue: Cannot find module @/router/router.ts or its corresponding type declarations.","content":"# Vue: Cannot find module @/router/router.ts or its corresponding type declarations.\\n\\n`tsconfig.json`中添加以下高亮代码行的配置：\\n```json {4-7}\\n{\\n    \\"compilerOptions\\": {\\n        /* path alias */\\n        \\"baseUrl\\": \\"./\\",\\n        \\"paths\\": {\\n            \\"@/*\\": [\\"./src/*\\"]\\n        }\\n    }\\n}\\n```","userId":1,"releaseTime":"2024-02-29T20:05:53.000+00:00","updateTime":"2024-10-11T05:04:39.000+00:00","isPublic":"公开","typeId":13,"url":"/note/91#Vue: Cannot find module @/router/router.ts or its corresponding type declarations."},{"id":111,"title":"flex 弹性布局","content":"# flex 弹性布局\\n\\n## 属性概览\\n\\n### flex容器的属性\\n\\n```css\\n.flex-container {\\n  /*主轴的方向*/\\n  flex-direction: row | row-reverse | column | column-reverse;\\n  /*换行*/\\n  flex-wrap: nowrap | wrap | wrap-reverse;\\n  /*flex-direction flex-wrap 简写*/\\n  flex-flow: <flex-direction> <flex-wrap>;\\n  /*子元素在主轴上的对齐方式*/\\n  justify-content: flex-start | flex-end | center | space-between | space-around;\\n  /*子元素在交叉轴上的对齐方式*/\\n  align-items","userId":1,"releaseTime":"2024-06-26T22:59:04.000+00:00","updateTime":"2024-10-11T05:05:09.000+00:00","isPublic":"公开","typeId":3,"url":"/note/111#flex 弹性布局"},{"id":127,"title":"Dockerfile语法","content":"# Dockerfile语法\\n\\n## 常见指令\\n\\n\\n| 指令       | 说明                                         | 示例                                                                     |\\n| ---------- | -------------------------------------------- | ------------------------------------------------------------------------ |\\n| FORM       | 指定基础镜像                                 | `FROM centos:6`                                   ","userId":1,"releaseTime":"2024-07-16T11:00:34.000+00:00","updateTime":"2024-10-11T05:04:56.000+00:00","isPublic":"公开","typeId":8,"url":"/note/127#Dockerfile语法"},{"id":131,"title":"Java中的线程安全","content":"# Java中的线程安全\\n\\n## 什么是线程安全？\\n\\n**简单来说，线程安全是多个线程访问同一段代码，不会造成不确定的结果。**\\n\\n**线程安全**就是多线程访问时，采用了加锁机制，同一时刻有且只有一个线程在操作共享数据，其他线程必须等到该线程处理完数据后再对共享数据进行操作，确保不会出现数据不一致或者数据污染。\\n\\n**线程不安全**就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。\\n","userId":1,"releaseTime":"2024-07-16T19:18:21.000+00:00","updateTime":"2024-10-11T05:05:34.000+00:00","isPublic":"公开","typeId":14,"url":"/note/131#Java中的线程安全"},{"id":134,"title":"Ubuntu 22.04 换国内镜像源","content":"# Ubuntu 22.04 换国内镜像源\\n\\n## 华为源\\n\\n```\\n# deb cdrom:[Ubuntu 22.04.2 LTS _Jammy Jellyfish_ - Release amd64 (20230223)]/ jammy main restricted\\n\\ndeb http://mirrors.huaweicloud.com/repository/ubuntu/ jammy main restricted\\ndeb http://mirrors.huaweicloud.com/repository/ubuntu/ jammy-updates main restricted\\ndeb http://mirrors.huaweicloud.com/repository/ubuntu/ jammy universe\\ndeb http://mirrors.huaweicloud.com","userId":1,"releaseTime":"2024-09-16T15:55:37.000+00:00","updateTime":"2024-10-11T05:05:54.000+00:00","isPublic":"公开","typeId":4,"url":"/note/134#Ubuntu 22.04 换国内镜像源"},{"id":138,"title":"Electron Security Warning (Insecure Content-Security-Policy)","content":"# Electron Security Warning (Insecure Content-Security-Policy)\\n\\n## 警告信息\\n\\n```\\nElectron Security Warning (Insecure Content-Security-Policy) This renderer process has either no Content Security Policy set or a policy with \\"unsafe-eval\\" enabled. This exposes users of this app to unnecessary security risks. For more information and help, consult https://electronjs.org/docs/tutorial/security. This warni","userId":1,"releaseTime":"2024-10-04T15:29:23.000+00:00","updateTime":"2024-10-11T05:05:59.000+00:00","isPublic":"公开","typeId":12,"url":"/note/138#Electron Security Warning (Insecure Content-Security-Policy)"},{"id":129,"title":"DockerCompose","content":"# DockerCompose\\n\\n命令格式：\\n\\n```bash\\ndocker compose [options] [command]\\n```\\n\\n`options`\\n\\n| 参数 | 说明                                                       |\\n| :--: | ---------------------------------------------------------- |\\n|  -f  | 指定compose文件的路径和名称（处于compose文件的目录可不写） |\\n|  -p  | 指定project名称                                            |\\n\\n`commands`\\n\\n| command | 说明                       |\\n| :-----: | ---","userId":1,"releaseTime":"2024-07-16T13:00:06.000+00:00","updateTime":"2024-10-11T05:05:39.000+00:00","isPublic":"公开","typeId":8,"url":"/note/129#DockerCompose"},{"id":135,"title":"Nginx 日志分割脚本（仅供参考）","content":"# Nginx 日志分割脚本（仅供参考）\\n\\n```bash\\n#!/bin/bash\\n\\nscript_dir=\\"$(cd \\"$(dirname \\"${BASH_SOURCE[0]}\\")\\" && pwd)\\"\\ncd $script_dir\\n\\ncurrent_time=$(date +\\"%Y-%m-%d_%H-%M-%S\\")\\necho $current_time\\n\\ntar_dir=$current_time\\nmkdir $tar_dir\\nmv ./*.log $tar_dir\\n\\ntar_name=log_$current_time.tar.gz\\ntar -zcf $tar_name $tar_dir && rm -rf $tar_dir\\necho \\"日志分割完毕\\"\\n\\ncontainer_id=$(docker ps | grep openresty | cut -d \' \' -f 1)\\n(dock","userId":1,"releaseTime":"2024-09-23T16:39:58.000+00:00","updateTime":"2024-10-11T05:06:02.000+00:00","isPublic":"公开","typeId":11,"url":"/note/135#Nginx 日志分割脚本（仅供参考）"},{"id":89,"title":"display:flex全兼容","content":"# display:flex全兼容\\n\\n```css\\n.flex{\\n\\tdisplay: flex;\\n\\tdisplay: -moz-box; /* Firefox 17- */  \\n\\tdisplay: -webkit-flex; /* Chrome 21+, Safari 6.1+, iOS Safari 7+, Opera 15/16 */  \\n\\tdisplay: -moz-flex; /* Firefox 18+ */  \\n\\tdisplay: -ms-flexbox; /* IE 10 */ \\n}\\n```","userId":1,"releaseTime":"2024-02-19T11:12:15.000+00:00","updateTime":"2024-10-11T05:05:25.000+00:00","isPublic":"公开","typeId":3,"url":"/note/89#display:flex全兼容"},{"id":47,"title":"vite/vue Top-level await","content":"npm安装vite-plugin-top-level-await插件\\n\\n```sh\\nnpm install vite-plugin-top-level-await -D\\n```\\n\\n配置vite.config.js文件\\n\\n导入\\n\\n```javascript\\nimport topLevelAwait from \'vite-plugin-top-level-await\';\\n```\\n\\n在plugins中添加topLevelAwait方法\\n\\n```javascript\\nplugins: [\\n  topLevelAwait({\\n    promiseExportName: \'__tla\',\\n    promiseImportName: i => `__tla_${i}`\\n  })\\n]\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:06:09.000+00:00","isPublic":"公开","typeId":13,"url":"/note/47#vite/vue Top-level await"},{"id":78,"title":"解决 Windows 10 端口被 Hyper-V 随机保留（占用）的问题","content":"# 解决 Windows 10 端口被 Hyper-V 随机保留（占用）的问题\\n::: tip\\n  执行以下命令可能需要管理员权限\\n:::\\n## 1. 问题背景\\n1. Windows 中有一个「TCP 动态端口范围」，处在这个范围内的端口，有时候会被一些服务占用。在 Windows Vista（或 Windows Server 2008）之前，动态端口范围是 `1025` 到 `5000`；在 Windows Vista（或 Windows Server 2008）之后，新的默认起始端口为 `49152`，新的默认结束端口为 `65535`。\\n2. 如果安装了 `Hyper-V`，那么 `Hyper-V` 会为容器宿主网络服务（Windows Container Host Networking Service）随机保留一些端口号使用。\\n\\n使用以下命令可以查看目前「TCP 动态端口」的范围\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-01-28T01:38:42.000+00:00","isPublic":"公开","typeId":18,"url":"/note/78#解决 Windows 10 端口被 Hyper-V 随机保留（占用）的问题"},{"id":88,"title":"由于无法应用有效的许可证或旁加载策略，部晋程序包来源为Unsigned的程序包失败，可能需要开发者许可证或企业旁加载配置","content":"由于无法应用有效的许可证或旁加载策略，部晋程序包来源为Unsigned的程序包失败，可能需要开发者许可证或企业旁加载配置。\\n\\n解决方法：\\n1. 按win+R键打开运行，输入【gpedit.msc】，打开【本地组策略编辑器】\\n2. 依次展开【**计算机配置–**>**管理模板**–>**Windows组件**–>**应用程序包部署**】，找到【**允许开发Windows应用商店并从集成开发环境（IDE）安装**】和【**允许所有受信任的应用程序**】，双击进入设置界面，选择【**已启用**】，然后后击【**应用**】确定即可。","userId":1,"releaseTime":"2024-02-19T10:28:06.000+00:00","updateTime":"2024-02-19T10:28:06.000+00:00","isPublic":"公开","typeId":18,"url":"/note/88#由于无法应用有效的许可证或旁加载策略，部晋程序包来源为Unsigned的程序包失败，可能需要开发者许可证或企业旁加载配置"},{"id":77,"title":"事件循环","content":"# 事件循环\\n\\n事件循环(event loop)(W3C)又叫消息循环(message loop)(Google)\\n\\n1. 开始时，浏览器的渲染主线程会进入一个无线循环\\n2. 每次循环都会检查消息队列(messqge queue)中是否有任务，有任务则拿出第一个来执行，没有则睡眠\\n\\n## 异步\\n\\nJS是一门单线程的语言，因为它运行在浏览器的**渲染主线程**中，而渲染主线程只有一个。\\n\\n而渲染主线程承担若诸多的工作，渲染页面、执行JS都在其中运行。\\n\\n如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。  这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。\\n\\n所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-01-28T01:38:42.000+00:00","isPublic":"公开","typeId":20,"url":"/note/77#事件循环"},{"id":94,"title":"prettier安装","content":"# prettier安装\\n\\n```sh\\nnpm install --save-dev prettier\\nnode --eval \\"fs.writeFileSync(\'.prettierrc\',\'{}\\\\n\')\\"\\n```\\n\\nformat\\n\\n```sh\\nnpx prettier . --write\\n```","userId":1,"releaseTime":"2024-03-14T16:47:13.000+00:00","updateTime":"2024-03-14T16:47:13.000+00:00","isPublic":"公开","typeId":20,"url":"/note/94#prettier安装"},{"id":130,"title":"Redis命令","content":"# Redis命令\\n\\n## 常见通用命令\\n\\n|      command      | description                                                         |\\n| :----------------: | ------------------------------------------------------------------- |\\n| `keys <pattern>` | 查看符合模板的所有key                                               |\\n|   `del <key>`   | 删除指定key                                                         |\\n|  `exists <key>`  | 判断ke","userId":1,"releaseTime":"2024-07-16T17:28:54.000+00:00","updateTime":"2024-07-16T17:28:54.000+00:00","isPublic":"公开","typeId":19,"url":"/note/130#Redis命令"},{"id":132,"title":"Jedis连接池","content":"# Jedis连接池\\n\\n```java\\n/**\\n * @author xclhove\\n */\\npublic class JedisConnectionFactory {\\n    private static final JedisPool JEDIS_POOL;\\n  \\n    static {\\n        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\\n        // 最大连接数\\n        jedisPoolConfig.setMaxTotal(10);\\n        // 最大空闲连接数\\n        jedisPoolConfig.setMaxIdle(10);\\n        // 最小空闲连接数\\n        jedisPoolConfig.setMinIdle(0);\\n        jedi","userId":1,"releaseTime":"2024-07-17T14:58:21.000+00:00","updateTime":"2024-07-17T14:58:21.000+00:00","isPublic":"公开","typeId":19,"url":"/note/132#Jedis连接池"},{"id":106,"title":"植物大战僵尸杂交版v2.1无法开启3D加速解决办法","content":"# 植物大战僵尸杂交版v2.1无法开启3D加速解决办法\\n\\n[植物大战僵尸杂交版下载地址（无需网盘）](https://zfile.xclhove.top/onedrive_1/games/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E6%9D%82%E4%BA%A4%E7%89%88)\\n\\n## 注意事项\\n\\n使用此办法的前提是你已经使用过【**补丁一**】或【**补丁二**】！！！\\n\\n使用此办法的前提是你已经使用过【**补丁一**】或【**补丁二**】！！！\\n\\n使用此办法的前提是你已经使用过【**补丁一**】或【**补丁二**】！！！\\n![62477df7-4e35-4d1a-81c7-22e9f09e34de.png](/api/image/name/62477df7-4e35-4d1a-81c7-22e9f09e34de.","userId":1,"releaseTime":"2024-06-13T16:48:13.000+00:00","updateTime":"2024-06-13T16:48:13.000+00:00","isPublic":"公开","typeId":16,"url":"/note/106#植物大战僵尸杂交版v2.1无法开启3D加速解决办法"},{"id":133,"title":"EA WRC 调整游戏亮度避免晃眼","content":"# EA WRC 调整游戏亮度避免晃眼\\n\\n文件`C:/user/用户名/AppData/Local/WRC/Saved/Config/WindowsNoEditor/Engine.ini`末尾添加：\\n\\n```ini\\n[/script/engine.renderersettings]\\nr.Streaming.PoolSize=0\\nniagara.CreateShadersOnLoad=1\\nr.CreateShadersOnLoad=1\\n\\n[SystemSettings]\\nr.DefaultFeature.Bloom=0\\nr.BloomQuality=0\\nr.ViewDistanceScale=2\\nr.Shadow.DistanceScale=1\\nr.Color.Mid=0.45\\nr.TonemapperGamma=2.5\\nr.EyeAdaptation.LensAttenuation=0.4","userId":1,"releaseTime":"2024-08-19T10:16:31.000+00:00","updateTime":"2024-08-19T10:16:31.000+00:00","isPublic":"公开","typeId":16,"url":"/note/133#EA WRC 调整游戏亮度避免晃眼"},{"id":110,"title":"小米VAB系列线刷中断导致无限FastBoot无法开机的解决办法","content":"# 小米VAB系列线刷中断导致无限FastBoot无法开机的解决办法\\n\\n[原帖：乌堆小透明-小米VAB系列线刷中断导致无限FastBoot无法开机的解决办法](https://www.coolapk.com/feed/37897384?shareKey=NjA1ODM2YWU2ZjBmNjY3N2ZiYmE~&shareUid=2081718&shareFrom=com.coolapk.market_14.0.3)\\n\\n有效解决870、888、8G1等VAB系列机型在线刷ROM包、清除数据、设置活动槽位时设备连接中断，导致的无限FastBoot。\\n\\n---\\n\\n## 操作注意\\n\\n如果设备没有遇到**无限FastBoot**请不要使用以下操作，可能导致更严重的错误。\\n\\n---\\n\\n## 准备工作\\n\\n* [小米官方线刷工具MiFlash](https://xiaomirom.com/download","userId":1,"releaseTime":"2024-06-26T15:12:26.000+00:00","updateTime":"2024-10-11T05:08:46.000+00:00","isPublic":"公开","typeId":5,"url":"/note/110#小米VAB系列线刷中断导致无限FastBoot无法开机的解决办法"},{"id":87,"title":"typescript编译为javascript","content":"# typescript编译为javascript\\n\\n安装 TypeScript 编译器。\\n\\n```\\nnpm install -g typescript\\n```\\n\\n运行以下命令来编译 TypeScript 文件：\\n\\n```\\ntsc your_file.ts\\n```\\n\\n将 `your_file.ts` 替换为你要编译的实际 TypeScript 文件的名称。\\n\\n- `--skipLibCheck` 选项告诉 TypeScript 编译器跳过库文件的类型检查。\\n- `--target es6` 选项告诉 TypeScript 编译器将编译目标设置为 ES6。\\n- `--module es6` 选项告诉 TypeScript 编译器生成的模块代码将符合 ES6 标准。\\n\\n```\\ntsc your_file.ts --skipLibCheck --target es6 --module es6\\n`","userId":1,"releaseTime":"2024-02-08T22:43:23.000+00:00","updateTime":"2024-02-08T22:43:23.000+00:00","isPublic":"公开","typeId":17,"url":"/note/87#typescript编译为javascript"},{"id":112,"title":"TypeScript 快速入门","content":"# TypeScript 快速入门\\n\\n## 简介\\n\\nTypeScript 是 JavaScript 的**超集**。\\n\\n## 如何进行类型注解\\n\\nts的类型标注只需在变量后方添加冒号：`:`，然后指定类型即可。\\n\\n1. 对变量进行类型注解\\n   ```ts\\n   let name: string = \'zhangsan\' // name的类型是string\\n   let count: number = 0 // count的类型是number\\n   let isOk: boolean = true // isOk的类型是boolean\\n   let list: number[] = [1, 2, 3] // list的类型是number[]\\n   let student: {\\n     // student.age为number类型\\n     age: number\\n     // stu","userId":1,"releaseTime":"2024-06-28T22:42:53.000+00:00","updateTime":"2024-06-28T22:42:53.000+00:00","isPublic":"公开","typeId":17,"url":"/note/112#TypeScript 快速入门"},{"id":117,"title":"浏览器使用js解析jwt","content":"# 浏览器使用js解析jwt\\n\\n```\\nfunction parseJwt(token) {\\n            // 将JWT按照.进行分割，取第二部分（payload部分）\\n            const base64Url = token.split(\'.\')[1];\\n\\n            // 对base64Url进行解码\\n            const base64 = base64Url\\n                .replace(/-/g, \'+\')\\n                .replace(/_/g, \'/\')\\n            const decodedData = decodeURIComponent(atob(base64)\\n                .split(\'\')\\n                .map((c) =>","userId":1,"releaseTime":"2024-07-04T10:33:14.000+00:00","updateTime":"2024-07-04T10:33:14.000+00:00","isPublic":"公开","typeId":17,"url":"/note/117#浏览器使用js解析jwt"},{"id":136,"title":"常见排序算法（Java）","content":"# 常见排序算法（Java）\\n\\n```java\\npublic class Main {\\n    public static void main(String[] args) {\\n        int[] array = {5, 4, 3, 2, 1};\\n        bubbleSort(array);\\n        insertionSort(array);\\n        System.out.println(Arrays.toString(array));\\n    }\\n  \\n    /**\\n     * 冒泡排序\\n     */\\n    static void bubbleSort(int[] array) {\\n        for (int i = 0; i < array.length - 1; i++) {\\n            for (int j = i + 1;","userId":1,"releaseTime":"2024-09-24T11:28:23.000+00:00","updateTime":"2024-10-11T05:07:15.000+00:00","isPublic":"公开","typeId":14,"url":"/note/136#常见排序算法（Java）"},{"id":44,"title":"element-plus form表单校验","content":"```javascript\\nconst validateBackAccount = (rule, value, callback) => {\\n  //return value === value.replace(/[^[a-z0-9A-Z]+$/g, \'\')\\n  //return \'\'  === value.replace(/[a-z0-9A-Z]+/g, \'\')\\n  let pattern = /[^[a-z0-9A-Z]+/g\\n  return !pattern.test(value)\\n}\\nconst initFormRules = ref({\\n  backAccount: [\\n    { required: true, message: \'请输入账号\', trigger: \'blur\' },\\n    { min: 5, max: 20, message: \'账号长度为5-20位\', ","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:06:20.000+00:00","isPublic":"公开","typeId":13,"url":"/note/44#element-plus form表单校验"},{"id":45,"title":"vue右键弹出菜单(vue-contextmenu)","content":"安装\\n\\n```\\nnpm install vue-contextmenu --save\\n```","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:06:16.000+00:00","isPublic":"公开","typeId":13,"url":"/note/45#vue右键弹出菜单(vue-contextmenu)"},{"id":141,"title":"Postgre SQL 表分区","content":"# Postgre SQL 表分区\\n\\n## 为什么要对表进行分区？\\n\\n表分区允许将一个大表拆分为多个小表，这样可以带来以下好处：\\n\\n- 较小的表在读取和写入方面速度更快。\\n- 您可以非常高效地删除整个分区，而不是逐行删除数据。\\n- 由于 PostgreSQL 知道如何修剪未用到的分区，因此您可以将分区用作一种粗略索引。例如，通过按日期划分表，您可能不再需要日期字段上的索引，而是使用顺序扫描。\\n- 很少使用的分区可以移动到更便宜的存储中。\\n\\n## 分区方式\\n\\n- 按范围分区\\n\\n```sql\\nCREATE TABLE measurements (\\n  id int8 NOT NULL,\\n  value float8 NOT NULL,\\n  date timestamptz NOT NULL\\n);\\n\\n# 按范围分区\\nCREATE TABLE measurements_y2021m01 PARTI","userId":1,"isPublic":"公开","typeId":1,"url":"/note/141#Postgre SQL 表分区"},{"id":142,"title":"Postgre SQL 的三种不同数据持久性","content":"# Postgre SQL 的三种不同数据持久性\\n\\n## PERSISTENT (持久的)\\n\\n这是默认选项，表示该表是持久化的，也就是表的数据会被永久保存到磁盘上，并且在数据库崩溃后，数据也能够被恢复。\\n\\n当你需要确保数据的长期存储和完整性时，应该选择这个选项。大多数情况下，你会使用这个选项，因为它提供了数据持久性和完整性保证。\\n\\n## UNLOGGED (未记录)\\n\\nUNLOGGED 表的变化不会被写入 PostgreSQL 的 Write-Ahead Logging (WAL) 日志中。这意味着此类表的数据在数据库崩溃时无法恢复。\\n\\n因为没有 WAL 日志记录，**UNLOGGED** 表可以比 **PERSISTENT** 表更快地写入数据，但数据库崩溃后，表中的数据会丢失。\\n\\n当你需要高写入性能且可以容忍数据丢失时（例如缓存表或临时数据），可以选择 UNLOGGED 表。\\n\\n## ","userId":1,"isPublic":"公开","typeId":1,"url":"/note/142#Postgre SQL 的三种不同数据持久性"},{"id":123,"title":"Spring Mvc执行流程","content":"# Spring Mvc执行流程\\n\\n使用Spring Mvc后，所有的请求都需要经过`DispatcherServlet`前端控制器，有关请求处理和结果响应的的所有流程都在该类的`doDispatcherServlet`方法中完成。\\n\\n1. 借助于`HanderMapping`得到处理器执行链，里面封装了`HandleMethod`代表目标`Controller`的方法，还有一个记录了要执行的拦截器的集合。\\n2. 根据`HandlerMethod`获取对应的`HandleAdapter`，其中封装了参数解析器和结果处理器。\\n3. 执行拦截器的`preHandle`方法。\\n4. 通过`HandleAdapter`执行目标`Controller`的方法，在这个过程中会通过参数解析器解析浏览器提交的数据和通过结果处理器处理`controller`方法返回的结果。\\n5. 执行拦截器的`postHa","userId":1,"releaseTime":"2024-07-15T17:11:31.000+00:00","updateTime":"2024-12-18T07:52:25.000+00:00","isPublic":"公开","typeId":1,"url":"/note/123#Spring Mvc执行流程"},{"id":143,"title":"Spring、Spring Boot 和 Spring MVC 有什么区别","content":"# Spring、Spring Boot 和 Spring MVC 有什么区别\\n\\n**Spring** 是一个 IOC 容器，用来管理 bean ，使用依赖注入实现控制翻转，可以很方便的整合各种框架，提供 AOP 机制弥补 OOP 的代码重复问题，更方便将不同类不同方法中的共同处理抽取成切面，自动注入给方法执行，比如日志、异常等。\\n\\n**Spring MVC** 是 Spring 对 web 框架的一个解决方案，提供了一个总的前端控制器 Servlet，用来接收请求，然后定义了一套路由策略（url 到 handle 的映射）及适配执行 handle，将 handle 结果使用视图解析技术生成视图展现给前端。\\n\\n**Spring Boot** 是 Spring 提供的一个快速开发工具包，让程序员能更方便、更快速的开发 Spring + Spring MVC 应用，简化了配置（约定了默认配置）","userId":1,"isPublic":"公开","typeId":1,"url":"/note/143#Spring、Spring Boot 和 Spring MVC 有什么区别"},{"id":52,"title":"前端获取不到后端设置的响应头","content":"跨域问题，前端用`Vue`，后端用`Springboot`进行前后分离端开发。当后端往`response`对象添加请求头字段的时候，前端无法获得该字段。\\n\\n后端需要往`response`对象添加如下：\\n\\n```java\\nhttpServletResponse.addHeader(\\"header-name\\", value);\\nhttpServletResponse.setHeader(\\"Access-Control-Expose-Headers\\",\\"header-name\\");\\n```\\n\\n`header-name`是你自己设置的字段名，`value`为值，这样设置前端就能收到该值。","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-10-11T05:11:04.000+00:00","isPublic":"公开","typeId":20,"url":"/note/52#前端获取不到后端设置的响应头"},{"id":95,"title":"docker 部署 open_vpn","content":"# docker 部署 open_vpn\\n\\n```sh\\ndocker run \\\\\\n -v $OVPN_DATA:/etc/openvpn \\\\\\n --rm kylemanna/openvpn ovpn_genconfig \\\\\\n -u udp://xclhove.top\\n```\\n\\n```sh\\ndocker run --rm -it\\\\\\n -v $OVPN_DATA:/etc/openvpn \\\\\\n kylemanna/openvpn ovpn_initpki\\n```\\n\\n```sh\\ndocker run \\\\\\n -v $OVPN_DATA:/etc/openvpn -d \\\\\\n -p 1194:1194/udp \\\\\\n --name open_vpn\\\\\\n --cap-add=NET_ADMIN kylemanna/openvpn\\n```\\n\\n```sh\\ndocker run --rm -it\\\\\\n -v $O","userId":1,"releaseTime":"2024-03-16T17:26:13.000+00:00","updateTime":"2024-10-11T05:12:05.000+00:00","isPublic":"公开","typeId":8,"url":"/note/95#docker 部署 open_vpn"},{"id":144,"title":"SSH 使用公钥登录","content":"# SSH 使用公钥登录\\n\\n将本机的公钥的放入服务器`authorized_keys`文件中即可。\\n\\n* 本机公钥：`<本机用户目录>/.ssh/id_rsa.pub`\\n* 本机私钥：`<本机用户目录>/.ssh/id_rsa`\\n* authorized_keys：`<服务器用户目录>/.ssh/authorized_keys`\\n","userId":1,"releaseTime":"2024-10-12T16:53:50.000+00:00","updateTime":"2024-10-12T08:58:28.000+00:00","isPublic":"公开","typeId":1,"url":"/note/144#SSH 使用公钥登录"},{"id":146,"title":"Centos 7/8 离线安装 docker/docker-compose","content":"# Centos 7/8 离线安装 docker/docker-compose\\n\\n## 离线安装 docker\\n\\n1. 下载 docker，这里以 **docker-27.4.1. tgz** 为例\\n\\n```\\nhttps://download.docker.com/linux/static/stable/x86_64/\\n```\\n\\n![image.png](/api/image/name/1_c17e5028a1a3f7fd847d8a8bc74c7c0c.png)\\n\\n1. 将压缩包上传到 centos 8 **/root**目录\\n2. 打开命令行，进入 /root 目录\\n\\n```\\ncd /root\\n```\\n\\n1. 解压docker-27.4.1. tgz压缩包\\n\\n```\\ntar -zxf docker-27.4.1.tgz\\n```\\n\\n1. 解压后 **/root** 目录下会多出一个 **","userId":1,"releaseTime":"2024-12-26T15:31:59.000+00:00","updateTime":"2024-12-27T09:01:02.000+00:00","isPublic":"公开","typeId":8,"url":"/note/146#Centos 7/8 离线安装 docker/docker-compose"},{"id":62,"title":"docker常用命令","content":"# docker常用命令\\n\\n## 镜像&容器\\n\\n![d2d171ee7c10a18785c1d22de811004c.png](/api/image/name/a55e5ca5-5980-4d78-b226-f33c58e2f9ec.png)\\n\\n- 拉取镜像\\n\\n```sh\\ndocker pull <imageName:version>\\n```\\n\\n不写 `version`默认为 `latest`\\n\\n- 查看本地镜像\\n\\n```sh\\ndocker images\\n```\\n\\n- 保存镜像到本地\\n\\n```sh\\ndocker save -o </path/to/file> <imageName:version>\\n```\\n\\n- 删除镜像\\n\\n```sh\\ndocker rmi <imageName:version>\\n```\\n\\n- 读取保存到本地镜像\\n\\n```sh\\ndocker load -i </path/t","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2025-02-15T12:05:08.000+00:00","isPublic":"公开","typeId":1,"url":"/note/62#docker常用命令"},{"id":30,"title":"docker安装 portainer-ce（中文版）","content":"`docker`安装 `portainer-ce`（中文版）\\n\\n```\\ndocker run -d \\\\\\n --name portainer \\\\\\n -p 9000:9000 \\\\\\n --restart=always \\\\\\n -v /var/run/docker.sock:/var/run/docker.sock \\\\\\n -v portainer_data:/data \\\\\\n 6053537/portainer-ce\\n```\\n\\ndocker-compose:\\n\\n```yaml\\nversion: \'3.8\'\\n\\nservices:\\n  portainer:\\n    image: 6053537/portainer-ce\\n    container_name: portainer\\n    restart: always\\n    ports:\\n      - \\"9000:9000\\"\\n    volumes:\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2025-02-14T06:30:49.000+00:00","isPublic":"公开","typeId":8,"url":"/note/30#docker安装 portainer-ce（中文版）"},{"id":145,"title":"edge/chrome 浏览器开启多线程下载","content":"# edge/chrome 浏览器开启多线程下载\\n\\nedge 访问：[edge://flags/#enable-parallel-downloading](edge://flags/#enable-parallel-downloading)\\n\\nchrome 访问：[chrome://flags/#enable-parallel-downloading](chrome://flags/#enable-parallel-downloading)\\n\\n将`Parallel downloading`选项设置为`Enabled`然后重启浏览器即可生效。\\n","userId":1,"isPublic":"公开","typeId":1,"url":"/note/145#edge/chrome 浏览器开启多线程下载"},{"id":11,"title":"ubuntu开放端口","content":"# ubuntu开放端口\\n\\n```sh\\nsudo ufw allow port/tcp\\n```\\n\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2024-11-10T11:16:18.000+00:00","isPublic":"公开","typeId":4,"url":"/note/11#ubuntu开放端口"},{"id":60,"title":"vue3 watch","content":"vue3 watch用法\\n![26d7cf0c8fd615929501d2a45736a89f.png](/api/image/name/4b6649e2-312e-43b2-bbb1-eb69cee2d536.png)\\n![f0bac89e94d4fbd5ebaabb6f9b2f11da.png](/api/image/name/050d8df1-543b-441f-86aa-d6cc5e18d21c.png)\\n![eefde37029cb5a387bbfabed03a9bb11.png](/api/image/name/e971e639-e56a-4823-8bbf-5fee5eeceb98.png)\\n![edd819436dedadf38f6d1b116035de1d.png](/api/image/name/b257f87b-1d6e-412a-b6d1-1745fadea843.","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2025-02-15T12:09:33.000+00:00","isPublic":"公开","typeId":1,"url":"/note/60#vue3 watch"},{"id":148,"title":"docker 安装 rabbitMQ","content":"# docker 安装 rabbitMQ\\n\\n命令：\\n\\n```bash\\n# commond\\n```\\n\\ndocker-compose:\\n\\n```yaml\\nservices:\\n  rabbitmq:\\n    image: rabbitmq:3.13.7-management\\n    container_name: rabbitmq-3.13.7-management\\n    hostname: rabbitmq-3.13.7-management\\n    ports:\\n      - 5672:5672\\n      - 15672:15672\\n    restart: always\\n    volumes:\\n      - rabbitmq_data:/var/lib/rabbitmq\\n    environment:\\n      - RABBITMQ_DEFAULT_USER=xclhove\\n","userId":1,"releaseTime":"2025-02-14T15:44:15.000+00:00","updateTime":"2025-02-15T12:20:29.000+00:00","isPublic":"公开","typeId":1,"url":"/note/148#docker 安装 rabbitMQ"},{"id":147,"title":"docker 安装 redis","content":"# docker 安装 redis\\n\\n命令：\\n\\n```bash\\n# commond\\nsudo docker run \\\\\\n -d --restart=always \\\\\\n --name redis \\\\\\n -p 6379:6379 \\\\\\n redis \\\\\\n redis-server --requirepass 123456\\n```\\n\\ndocker-compose:\\n\\n```yaml\\nservices:\\n  redis:\\n    image: redis:7.4.1\\n    container_name: redis-7.4.1\\n    ports:\\n      - 6379:6379\\n    restart: always\\n    volumes:\\n      - redis_data:/data\\n      - redis_conf:/redis/conf\\n      - redis_log:/","userId":1,"releaseTime":"2025-02-14T14:35:48.000+00:00","updateTime":"2025-02-15T12:22:19.000+00:00","isPublic":"公开","typeId":1,"url":"/note/147#docker 安装 redis"},{"id":1,"title":"git常用命令","content":"# git常用命令\\n\\n设置用户名\\n\\n```bash\\ngit config --global user.name xclhove\\n```\\n\\n设置邮箱\\n\\n```sh\\ngit config --global user.email xclhove@qq.com\\n```\\n\\n生成ssh公钥\\n\\n```sh\\nssh-keygen -t rsa\\n```\\n\\n查看公钥\\n\\n```sh\\ncat ~/.ssh/id_rsa.pub\\n```\\n\\n在 Git 中创建一个不继承任何历史记录的分支\\n\\n```\\ngit checkout --orphan new_branch\\n```\\n","userId":1,"releaseTime":"2024-01-28T01:38:42.000+00:00","updateTime":"2025-02-15T12:23:26.000+00:00","isPublic":"公开","typeId":2,"url":"/note/1#git常用命令"}]'),u=e("h1",{id:"笔记",tabindex:"-1"},[l("笔记 "),e("a",{class:"header-anchor",href:"#笔记","aria-label":'Permalink to "笔记"'},"​")],-1),c=["href"],m=e("br",null,null,-1),h=JSON.parse('{"title":"笔记","description":"","frontmatter":{},"headers":[],"relativePath":"笔记.md","filePath":"笔记.md"}'),T={name:"笔记.md"},I=r({...T,setup(g){return(y,b)=>(i(),t("div",null,[u,e("ol",null,[(i(!0),t(o,null,s(a(p),n=>(i(),t("li",{key:n.id},[e("a",{href:n.url},d(n.title),9,c),m]))),128))])]))}});export{h as __pageData,I as default};
